package common::CLI;

use Pet::Recorder::TestRecorder;
#use Expect;
$VERSION = '1.0';

#use Pet::TestCase::WorkSheet;

## This module is use Perl Expect to do all the CLI command auotomation
##
##
##
##     this module receive an hash var to exuce the comand and judge the result use the pet record function
##   the input hash is like this :
##        {         'CaseInfo' => {
##                                 '_case_generator' => 'this is generated by',
##                                 '_template_type' => 'OSS TL1',
##                                 '_case_author' => 'this is author',
##                                 '_case_desc' => 'this is description',
##                                 '_case_date' => 'this is date',
##                                 '_template_version' => '1.0',
##                                 '_case_version' => 'this is version'
##                               }
##                 'CaseList' => [
##                                 {
##                                   'caseName' => 'SilvxOSS TL1: RTRV-USER-SECU - Retrieve a specified user.',
##                                   'stepNum' => 3,
##                                   'Step1' => [
##                                                'Retrieve NMS User: root',
##                                                'RTRV-USER-SECU::root:free;',
##                                                '=~',
##                                                'GROUP=SUPER_GROUP, PROFILE=ROOT'
##                                                '10'#time out sec
##                                              ],
##                                   'Step2' => [
##                                               'Retrieve SN9000 Node User: ',
##                                                'RTRV-USER-SECU:172.21.5.4:free:rtrv;',
##                                                '=~',
##                                                'NAME=FREE,PWDEXPIRATM=NEVER',
##                                                '10'#time out sec
##                                              ],
##                                   'Step3' => [
##                                                "\x{2026}",
##                                                "\x{2026}",
##                                                "\x{2026}",
##                                                "\x{2026}"
##                                              ]
##                                 },
##                                 {
##                                   'caseName' => 'SilvxOSS TL1: DLT-USER-SECU - Delete a specified user.',
##                                   'stepNum' => 3,
##                                   'Step1' => [
##                                                'step1',
##                                                "\x{2026}",
##                                                "\x{2026}",
##                                                "\x{2026}"
##                                              ],
##                                   'Step2' => [
##                                                'step2',
##                                                "\x{2026}",
##                                                "\x{2026}",
##                                                "\x{2026}"
##                                              ]
##                                 }
##                               ],
##               }
##
##kangjian create 7/28 2010
##
##you should use like this we
#my $test = new FREE::Interface::CLI();
#$test->run($debugdata);  debugdata is data struct as top

#use strict;

#################################################################################
## new(): constructor

sub new {

	my ( $class, $exp_handle ) = @_;
	if ( $exp_handle eq undef ) {
		if ( $exp eq undef ) {
			ErrorMsg("fetal error :undef the expect handle");
		}

		$exp_handle = $exp;    #exp is globle expect handle for CLI commond
	}

	my $self = {
		_cli_handle => $exp_handle
		,    #$exp_handle is expect handle init when physical test bed run
		timeout         => 10,    #default timeout time is 10 seconds
		timeout_default => 20,
		actual_string   => "",
		step_name       => "",
		op              => "",
		exp_string      => "",
		command         => "",
	};

	bless $self, $class;

	return $self;

}

sub get_cli_handle {
	my $self = shift;

	return $self->{'_cli_handle'};
}

#set the handle
sub set_cli_handle {
	my ( $self, $expect ) = shift;

	if ($expect) {
		$self->{'_cli_handle'} = $expect;
	}
	return $expect;

}

#assert the cli handle have been set to expect
sub assert_cli {
	my $self = shift;
	if ( $self->get_cli_handle() eq undef ) {
		ErrorMsg(
			"please run test bed first, or check the test bed is correct?");
		return FAIL;
	}
	return PASS;

}

#run case in CLI mode (use send by expect and get the return)
sub run {
	my ( $self, $cli_data ) = @_;

	if ( $self->assert_cli() ) {

		#save the data
		my $case_list = $cli_data->{'CaseList'};

		my $step_timeout = $cli_data->{'CaseInfo'}->{'_default_stepInterval'};

		if ( $step_timeout ne undef ) {
			$self->{'timeout_default'} = int($step_timeout);
		}

		#run each case in the list
		#with test start and start record to TMS
		for ( $i = 0 ; $i < scalar(@$case_list) ; $i++ ) {
			$self->run_case( @$case_list[$i] );
		}
	}

}

#run detail case
sub run_case {
	my ( $self, $case ) = @_;

	my $step_count = $case->{'stepNum'};

	CaseStart( $case->{'caseName'} );
	eval {
		my $i = 1;
		for ( ; $i <= $step_count ; $i = $i + 1 ) {
			$self->run_step( $case->{ 'Step' . $i } );
		}
	};
	if ($@) {
		ErrorMsg("fatal error when run case $case->{'caseName'}:$@");
	}

	CaseEnd();
}

#run detail step
sub run_step {
	my ( $self, $step_commond ) = @_;

	if ( scalar(@$step_commond) == 5 ) {
		$self->{'timeout'} = int( pop(@$step_commond) );
		if ( $self->{'timeout'} == 0 ) {
			$self->{'timeout'} = $self->{'timeout_default'};
		}

	}

	$self->{'exp_string'} = pop(@$step_commond);
	$self->{'op'}         = pop(@$step_commond);
	$self->{'command'}    = pop(@$step_commond);
	$self->{'step_name'}  = pop(@$step_commond);

	#execute the command
	$self->exec_command();
	$self->verify_result();
	$self->_init_step_data();
}

sub _init_step_data {
	my $self = shift;
	$self->{'command'}       = undef;
	$self->{'step_name'}     = "";
	$self->{'op'}            = "";
	$self->{'exp_string'}    = "";
	$self->{'actual_string'} = "";
}

#return FAIL when command execute fail or occour an exception
sub exec_command {
	my ($self) = @_;

	if ( $self->{'command'} eq undef ) {
		return PASS;
	}

	my $cli_handle = $self->get_cli_handle();
	if ($cli_handle) {
		$cli_handle->clear_accum();
		$cli_handle->send("$self->{'command'}\r");

		#$cli_handle->clear_accum();
		#wait 15 sec to get the string
		#InfoMsg($self->{'timeout'});
		#sleep($self->{'timeout'});
		$cli_handle->expect($self->{'timeout'});
		if ( $error ne undef ) {
			ErrorMsg(
				"Error when run commond:$command;\r\n error message:$error");
			return FAIL;
		}
		$self->{'actual_string'} =
		  substr( $cli_handle->before(), length( $self->{'command'})+2 )
		  ;
		InfoMsg("Send commond:$self->{'command'}");
		InfoMsg("Return result:$self->{'actual_string'}");
		InfoMsg("Expect result:$self->{'exp_string'}");
		InfoMsg("Op value :$self->{'op'}");

	}
}

#check the ops and result
sub verify_result {
	my $self = shift;
	my $op   = $self->{'op'};
	eval {

		#add logs should here
		if ( $op eq "=~" ) {
			Like( $self->{'actual_string'},
				$self->{'exp_string'}, $self->{'step_name'} );

		}
		if ( $op eq "!~" ) {
			Unlike( $self->{'actual_string'},
				$self->{'exp_string'}, $self->{'step_name'} );

		}

		#nerver used in script
		if ( $op eq "==" ) {
			Is( $self->{'actual_string'},
				$self->{'exp_string'}, $self->{'step_name'} );
		}
		if ( $op eq "!=" ) {
			Isnt( $self->{'actual_string'},
				$self->{'exp_string'}, $self->{'step_name'} );

		}

		#just fail the step
		if ( uc($op) eq "P" ) {
			Pass( $self->{'step_name'} );

		}

		#just pass the step . not check the result
		if ( uc($op) eq "F" ) {
			Fail( $self->{'step_name'} );
		}
	};
	if ($@) {
		ErrorMsg("fatal error when run step:$@");
		Fail( $self->{'step_name'} );
	}
}

1;

